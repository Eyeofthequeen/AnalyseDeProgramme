PARSER_BEGIN(Visibility)
import java.util.*;

enum Keys { PRIVATE, PROTECTED, PUBLIC }

public class Visibility {
    public static void main(String[] args) {
        try {
         	new Visibility(new java.io.StringReader(args[0])).Input();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}

class Stats {
  	static Integer nbSimpleAttributes = 0, nbReferencedAttributes = 0;
  	static private Integer repeatLong = 15, repeatDefault = 8;
  	
	static ArrayList<String> visibleFor = new ArrayList<String>();
	static Integer privates = 0, publics = 0, protecteds = 0;

	static Map<String, ArrayList<String>> visibleForByClass = new HashMap<String, ArrayList<String>>();
	static Map<String, String> specifiersByClass = new HashMap<String, String>();

	static Map<String, Integer> nbSimpleAttributesByClass = new HashMap<String, Integer>();
	static Map<String, Integer> nbReferencedAttributesByClass = new HashMap<String, Integer>();

	static Map<String, Map<Keys, Integer>> nbAttributesBySpecifierByClass = new HashMap<String, Map<Keys, Integer>>();

	static void compileClasses(String currentClassName, Token specifier) {
	  	String spec = (specifier == null) ? "public" : specifier.image;

		visibleForByClass.put(currentClassName, visibleFor);
		visibleFor = new ArrayList<String>();

		specifiersByClass.put(currentClassName, spec);

		nbSimpleAttributesByClass.put(currentClassName, nbSimpleAttributes);
		nbSimpleAttributes = 0;

		nbReferencedAttributesByClass.put(currentClassName, nbReferencedAttributes);
		nbReferencedAttributes = 0;

		nbAttributesBySpecifierByClass.put(currentClassName, new HashMap<Keys, Integer>());
		nbAttributesBySpecifierByClass.get(currentClassName).put(Keys.PUBLIC, publics);
		nbAttributesBySpecifierByClass.get(currentClassName).put(Keys.PROTECTED, protecteds);
		nbAttributesBySpecifierByClass.get(currentClassName).put(Keys.PRIVATE, privates);
		privates = publics = protecteds = 0;
	}

	static void output() {
		for (Map.Entry<String, String> entry : specifiersByClass.entrySet()) {
			String name = entry.getKey();
			String specifier = entry.getValue();
			ArrayList<String> associations = visibleForByClass.get(name);
			String pourcentLine = "Pourcentage d'attribut";

			System.out.println("\n");
			lineOutput(repeatLong);
			System.out.println("Nom de la classe : " + name);
			lineOutput(repeatDefault);
			System.out.println("Spécificateur d'accès : " + specifier);
			System.out.println("Nombre d'associations : " + associations.size());
			System.out.println("Associations : " + associations);

			Integer total = nbSimpleAttributesByClass.get(name) + nbReferencedAttributesByClass.get(name);
			System.out.println("\nNombre d'attribut total : " + total);
			lineOutput(repeatDefault);

			System.out.println("Nombre d'attribut de type simple : " + nbSimpleAttributesByClass.get(name));
			pourcentage(pourcentLine + " de type simple : ", total, nbSimpleAttributesByClass.get(name));
			lineOutput(repeatDefault);
			System.out.println("Nombre d'attribut de référence : " + nbReferencedAttributesByClass.get(name));
			pourcentage(pourcentLine + " de référence : ", total, nbReferencedAttributesByClass.get(name));
			lineOutput(repeatDefault);

			System.out.println("Nombre d'attribut public : " + nbAttributesBySpecifierByClass.get(name).get(Keys.PUBLIC));
			pourcentage(pourcentLine + "  public : ", total, nbAttributesBySpecifierByClass.get(name).get(Keys.PUBLIC));
			lineOutput(repeatDefault);

			System.out.println("Nombre d'attribut private : " + nbAttributesBySpecifierByClass.get(name).get(Keys.PRIVATE));
			pourcentage(pourcentLine + "  private : ", total, nbAttributesBySpecifierByClass.get(name).get(Keys.PRIVATE));
			lineOutput(repeatDefault);

			System.out.println("Nombre d'attribut protected : " + nbAttributesBySpecifierByClass.get(name).get(Keys.PROTECTED));
			pourcentage(pourcentLine + "  protected : ", total, nbAttributesBySpecifierByClass.get(name).get(Keys.PROTECTED));
			lineOutput(repeatLong);
		}
	}

	private static void pourcentage(String message, int total, int attributes) {
		if (total > 0) { System.out.println(message + String.format("%.2f", (float) attributes/total * 100) + "%"); }
		else { System.out.println(message + "0%"); }
	}

	private static void lineOutput(Integer repeat) {
		System.out.println(new String(new char[repeat]).replace("\0", "-"));
	}
}
PARSER_END(Visibility)

SKIP:  { " " | "\t" | "\n" | "\r" }
TOKEN:
{
  <PRIVATE: "private">
  | <PROTECTED: "protected">
  | <PUBLIC: "public">
  | <STATIC: "static">
  | <CLASS: "class">
  | <NEW: "new">
}

TOKEN:
{
  <LBRACE: "{"> | <RBRACE: "}">
  | <LPARENTHESIS: "("> | <RPARENTHESIS: ")">
  | <EQUAL: "=">
  | <DOT: ".">
  | <SEMICOLON: ";">
  | <UPPERCAMEL: (["A"-"Z"])+(["a"-"z","A"-"Z", "0"-"9", "_"])*>
  | <LOWERCAMEL: (["a"-"z"])+(["a"-"z","A"-"Z", "0"-"9", "_"])*>
}

TOKEN:
{
  <NUMBER: <INTEGER> | <REEL>>
  | <INTEGER: (["0"-"9"])+>
  | <REEL: <INTEGER> (<DOT> <INTEGER>)?>
}

void Input() : {} { MatchedClass() <EOF> { Stats.output(); }}

void MatchedClass() : { Token name, specifier; }
{
  (specifier = AccessSpecifier()) <CLASS> (name = <UPPERCAMEL>) [MatchedBraces(name.image, specifier)] [MatchedClass()]
}

void MatchedBraces(String name, Token specifier) : {}
{
	<LBRACE> MatchedAttributsOrMethod() <RBRACE>

	{ Stats.compileClasses(name, specifier); }
}

void MatchedAttributsOrMethod() : { Token token; } { (token=Prefixer() (MatchedAttribut(token)| Method())+)* }

void MatchedAttribut(Token token) : {}
{
  Attribut()
  {
	if (token == null || token.image == "public") { ++Stats.publics; }
	else if (token.image == "private") { ++Stats.privates; }
	else if (token.image == "protected") { ++Stats.protecteds; }
	else { throw new ParseException("Spécificateur d'accès invalide."); }
  }
}

Token AccessSpecifier(): {Token token = null;} { (token = <PUBLIC> | token = <PRIVATE> | token = <PROTECTED> | token = <STATIC>)* { return token; }}
Token Prefixer(): { Token specifier = null; } { specifier = AccessSpecifier() Type() <LOWERCAMEL> { return specifier; }}

void Method(): {} { Parenthesis() <LBRACE> <RBRACE>} // Inside method not handled
void Parenthesis(): {} { <LPARENTHESIS> [Params()] <RPARENTHESIS> }
void Params(): {} { Value(false) ("," Value(false))* }
void Type(): { } { <UPPERCAMEL> | <LOWERCAMEL> }

void Attribut(): {} { <EQUAL> Value(true) <SEMICOLON> }
void Value(boolean isAttribute): { boolean isSimpleValue = false; } { (NewObject() | isSimpleValue = IsSimpleValue()) { if(isSimpleValue && isAttribute) { ++Stats.nbSimpleAttributes; } }}
boolean IsSimpleValue(): { } { <LOWERCAMEL> | Number() { return true; }}

void NewObject(): { Token name; } {
  <NEW> name = <UPPERCAMEL> Parenthesis()
  {
	Stats.visibleFor.add(name.image);
	++Stats.nbReferencedAttributes;
  }
}

void Number(): {}
{
  <NUMBER>
  {
     Token nextToken = getToken(1);
     if (nextToken.image.equals(".")) {
		throw new ParseException("A number can only have one [.]. Expected value : " + getToken(0).image);
     }
  }
}