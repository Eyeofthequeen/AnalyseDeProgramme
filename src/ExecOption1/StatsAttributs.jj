PARSER_BEGIN(StatsAttributs)
import java.util.HashMap;

enum Keys { PRIVATE, PROTECTED, PUBLIC, CLASSES }

public class StatsAttributs {
	public static void main(String[] args) {
		try {
		  new StatsAttributs(new java.io.StringReader(args[0])).Input();
		  System.out.println("Parser executed with success.");
		} catch (Throwable e) {
			System.out.println("Syntax check failed : " + e.getMessage());
		}
	}
}

class Stats {
  	static int privates = 0;
  	static int publics = 0;
  	static int protecteds = 0;
  	
	static HashMap<Keys, Integer> cache = new HashMap<Keys, Integer>();
	static HashMap<Keys, Integer> buffer = new HashMap<Keys, Integer>();

	static void updateBuffer() {
		buffer.putAll(cache);
	}
}
PARSER_END(StatsAttributs)

SKIP:  { " " | "\t" | "\n" | "\r" }
TOKEN:
{
  <PRIVATE: "private">
  | <PROTECTED: "protected">
  | <PUBLIC: "public">
  | <STATIC: "static">
  | <CLASS: "class">
  | <NEW: "new">
}

// <BASIC: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","-","0"-"9"] )* >

TOKEN:
{
  <LBRACE: "{"> | <RBRACE: "}">
  | <LPARENTHESIS: "("> | <RPARENTHESIS: ")">
  | <EQUAL: "=">
  | <DOT: ".">
  | <SEMICOLON: ";">
  | <UPPERCAMEL: (["A"-"Z"])+(["a"-"z","A"-"Z", "0"-"9", "_"])*>
  | <LOWERCAMEL: (["a"-"z"])+(["a"-"z","A"-"Z", "0"-"9", "_"])*>
}

TOKEN:
{
  <NUMBER: <INTEGER> | <REEL>>
  | <INTEGER: (["0"-"9"])+>
  | <REEL: <INTEGER> (<DOT> <INTEGER>)?>
}

void Input() : { }
{
  MatchedClass() <EOF>
  {
    String pourcentage = " % ";
    String totalOf = "\t Avec un total de : ";
	int total = Stats.publics + Stats.privates + Stats.protecteds;

	System.out.println("Total d'attributs : " + total);
	System.out.println("Pourcentage d'attributs public :  " + Pourcentage(total, Stats.publics) + pourcentage + totalOf + Stats.publics);
	System.out.println("Pourcentage d'attributs private : " + Pourcentage(total, Stats.privates) + pourcentage + totalOf + Stats.privates);
	System.out.println("Pourcentage d'attributs protected : " + Pourcentage(total, Stats.protecteds) + pourcentage + totalOf + Stats.protecteds);
  }
}

String Pourcentage(int total, int attributes): { } {
  {  	  	
	if (total > 0) {
		return String.format("%.2f", (float) attributes/total * 100);
	}
	return "0";
  }
}

void MatchedClass() : {}
{
  <CLASS> <UPPERCAMEL> [MatchedBraces()] [MatchedClass()]
}

void MatchedBraces() : {}
{
 	<LBRACE> MatchedAttributsOrMethod() [MatchedBraces()] <RBRACE>
}

void MatchedAttributsOrMethod(): { Token token; }
{
  (token = Prefixer() (MatchedAttribut(token)| Method())+)*
}

void MatchedAttribut(Token token) : { }
{
  Attribut()
  {
	if (token == null || token.image == "public") { ++Stats.publics; }
	else if (token.image == "private") { ++Stats.privates; }
	else if (token.image == "protected") { ++Stats.protecteds; }
	else { throw new ParseException("Spécificateur d'accès invalide."); }
  }
}

Token AccessSpecifier(): {Token token = null;} { (token = <PUBLIC> | token = <PRIVATE> | token = <PROTECTED> | token = <STATIC>)* { return token; }}
Token Prefixer(): { Token token = null; } { token = AccessSpecifier() Type() <LOWERCAMEL> { return token; }}

void Attribut(): {} { <EQUAL> Value() <SEMICOLON> }

void Method(): {} { Parenthesis() <LBRACE> <RBRACE>} // Inside method not handled

void Value(): {} { NewObject() | <LOWERCAMEL> | Number() }

void Type(): { } { <UPPERCAMEL> | <LOWERCAMEL> }

void NewObject(): {} { <NEW> <UPPERCAMEL> Parenthesis() }

void Parenthesis(): {} { <LPARENTHESIS> [Params()] <RPARENTHESIS> }

void Params(): {} { Value() ("," Value())* }


void Number(): {}
{
  <NUMBER>
  {
     Token nextToken = getToken(1);
     if (nextToken.image.equals(".")) {
		throw new ParseException("A number can only have one [.]. Expected value : " + getToken(0).image);
     }
  }
}